<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis - Datatypes on ch.hugo</title><link>https://chhz0.github.io/notes/database/redis/datatypes/</link><description>Recent content in Redis - Datatypes on ch.hugo</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Jun 2025 22:36:08 +0800</lastBuildDate><atom:link href="https://chhz0.github.io/notes/database/redis/datatypes/rss.xml" rel="self" type="application/rss+xml"/><item><title>Redis - Hash</title><link>https://chhz0.github.io/notes/database/redis/datatypes/hash/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/hash/</guid><description>&lt;h2 id="redis--hash-">Redis &amp;lt; Hash &amp;gt;&lt;/h2>
&lt;p>Redis Hash 是结构化为字段值(field)-&amp;gt;值(value)集合的记录类型. 可以使用&lt;code>Hash&lt;/code>来表示基础对象并存储计数器分组.&lt;/p>
&lt;blockquote>
&lt;p>创建的&lt;code>Hash&lt;/code>数量没有实际限制，除了受到可用内存的限制，
但是每个&lt;code>Hash&lt;/code>最多可以存储 4,294,967,295 (2^32 - 1) 个字段值对&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>Hash&lt;/code>可以很方便的表示对象&lt;/p>
&lt;h3 id="hash-命令">Hash 命令&lt;/h3>
&lt;p>Hash常用命令：&lt;/p>
&lt;ul>
&lt;li>创建：&lt;code>HSET&lt;/code>, &lt;code>HSETNX&lt;/code>
&lt;ul>
&lt;li>&lt;code>HSET key field value&lt;/code> # 为集合对于field设置value，可以一次设置多个field-value&lt;/li>
&lt;li>&lt;code>HSETNX key field value&lt;/code> # 如果field不存在，则为集合对应field设置value数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询：&lt;code>HGETALL&lt;/code>, &lt;code>HGET&lt;/code>, &lt;code>HLEN&lt;/code>, &lt;code>HSCAN&lt;/code>
&lt;ul>
&lt;li>&lt;code>HGETALL key&lt;/code> # 查找全部数据&lt;/li>
&lt;li>&lt;code>HGET key field&lt;/code> # 查找某个key（field）&lt;/li>
&lt;li>&lt;code>HLEN key&lt;/code> # 查找Hash中元素总数&lt;/li>
&lt;li>&lt;code>HSCAN key cursor [MATCH pattern] [COUNT count]&lt;/code> # 从指定位置查询一定数量的数据，这里注意如果是小数据量下，处于ZIPLIST时，COUNT不管填多少，都是返回全部，因为ZIPLIST本身就用于小集合，没必要切分几段返回&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新：&lt;code>HSET&lt;/code>, &lt;code>HSETNX&lt;/code>, &lt;code>HDEL&lt;/code>
&lt;ul>
&lt;li>&lt;code>HDEL key field [field ...]&lt;/code> # 删除指定field，可以一次删除多个&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除：&lt;code>DEL&lt;/code>
&lt;ul>
&lt;li>&lt;code>DEL key [key ...]&lt;/code> # 删除Hash对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="hash-编码底层实现">Hash 编码(底层实现)&lt;/h3>
&lt;p>Hash底层有两个编码方式：&lt;code>ZIPLIST&lt;/code>, &lt;code>HASHTABLE&lt;/code>&lt;/p></description></item><item><title>Redis - List</title><link>https://chhz0.github.io/notes/database/redis/datatypes/list/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/list/</guid><description>&lt;h2 id="redis--list-">Redis &amp;lt; List &amp;gt;&lt;/h2>
&lt;p>Redis List是一组连续的字符串值&lt;strong>链表&lt;/strong>，这意味着向List的头部或者尾部中添加新元素的操作会在恒定的时间内完成，
无论其已经存储了多少元素，但是缺点是访问元素的操作则需要遍历List，时间复杂度为O(N)&lt;/p>
&lt;p>Redis List经常用于:&lt;/p>
&lt;ul>
&lt;li>实现堆栈和队列&lt;/li>
&lt;li>为后台系统构建队列管理&lt;/li>
&lt;/ul>
&lt;h3 id="list-命令">List 命令&lt;/h3>
&lt;p>常用命令:&lt;/p>
&lt;ul>
&lt;li>创建 &amp;ndash;&amp;gt; &lt;code>LPUSH&lt;/code>, &lt;code>RPUSH&lt;/code>
&lt;ul>
&lt;li>&lt;code>LPUSH key value [value ...]&lt;/code> # 从头部增加元素，返回List中元素总数&lt;/li>
&lt;li>&lt;code>RPUSH key value [value ...]&lt;/code> # 从尾部增加元素，返回List中元素总数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询 &amp;ndash;&amp;gt; &lt;code>LLEN&lt;/code>, &lt;code>LRANGE&lt;/code>
&lt;ul>
&lt;li>&lt;code>LLEN&lt;/code> # 查看List的长度，即List中元素的总数&lt;/li>
&lt;li>&lt;code>LRANGE key start stop&lt;/code> # 查看start到stop为角标的元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新 &amp;ndash;&amp;gt; &lt;code>LPUSH&lt;/code>, &lt;code>RPUSH&lt;/code>, &lt;code>LPOP&lt;/code>, &lt;code>RPOP&lt;/code>, &lt;code>LREM&lt;/code>
&lt;ul>
&lt;li>&lt;code>LPOP key&lt;/code> # 移除并获取列表的第一个元素&lt;/li>
&lt;li>&lt;code>RPOP key&lt;/code> # 移除并获取列表的第一个元素&lt;/li>
&lt;li>&lt;code>LREM key count value&lt;/code> # 移除值等于value的元素
&lt;ul>
&lt;li>count = 0 ，则移除所有等于value的元素；&lt;/li>
&lt;li>count &amp;gt; 0 ，则从左到右开始移除count个value元素；&lt;/li>
&lt;li>count &amp;lt; 0，则从右往左移除count个元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除 &amp;ndash;&amp;gt; &lt;code>DEL&lt;/code>, &lt;code>UNLINK&lt;/code>
&lt;ul>
&lt;li>&lt;code>DEL key [key ...]&lt;/code> # 删除对象，返回值为删除成功了几个键&lt;/li>
&lt;li>&lt;code>UNLIKN key [key ...]&lt;/code> # 删除对象，返回值为删除成功了几个键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>del命令与unlink命令均为删除对象，不同的是del命令是同步删除目录，会阻塞客户端，直到删除完成；
unlink命令是异步删除命令，只是取消key在键空间的关联，让其不在能查到，删除是异步进行，所以不会阻塞客户端.&lt;/p></description></item><item><title>Redis - Set</title><link>https://chhz0.github.io/notes/database/redis/datatypes/set/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/set/</guid><description>&lt;h2 id="redis-set-">Redis&amp;lt; Set &amp;gt;&lt;/h2>
&lt;p>Redis Set是一个唯一字符串的集合&lt;/p>
&lt;p>适用于：&lt;/p>
&lt;ol>
&lt;li>跟踪唯一目标(e.g., 跟踪访问给定博客的所有唯一IP地址)&lt;/li>
&lt;li>表示关系(e.g., 具有给定角色的所有用户集合)&lt;/li>
&lt;li>执行常见的集合运算(e.g., 根据集合运算能力获取不同用户的共同信息)&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Redis Set的最大大小为2^32-1(4294967295)&lt;/p>&lt;/blockquote>
&lt;h3 id="set-命令">Set 命令&lt;/h3>
&lt;p>Set的基本操作有：&lt;/p>
&lt;ul>
&lt;li>创建：&lt;code>SADD&lt;/code>
&lt;ul>
&lt;li>&lt;code>SADD key member [member ...]&lt;/code> # 添加元素，返回值为成功添加了几个元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询：&lt;code>SISMEMBR&lt;/code>, &lt;code>SCARD&lt;/code>, &lt;code>SMEMBERS&lt;/code>, &lt;code>SSCAN&lt;/code>, &lt;code>SINTER&lt;/code>, &lt;code>SUNION&lt;/code>, &lt;code>SDIFF&lt;/code>
&lt;ul>
&lt;li>&lt;code>SISMEMBER key member&lt;/code> # 查询元素是否存在&lt;/li>
&lt;li>&lt;code>SCARD key&lt;/code> # 查询集合元素个数&lt;/li>
&lt;li>&lt;code>SMEMBERS key&lt;/code> # 查看集合的所有元素&lt;/li>
&lt;li>&lt;code>SSCAN key cursor[MATCH pattern][COUNT count]&lt;/code> # 查看集合元素，可以理解为指定游标进行查询，可以指定个数，默认为10&lt;/li>
&lt;li>&lt;code>SINTER key [key ...]&lt;/code> # 返回在第一个集合，同时在后面所有集合都存在元素&lt;/li>
&lt;li>&lt;code>SUNION key [key ...]&lt;/code> # 返回所有集合的并集，集合个数大于等于2&lt;/li>
&lt;li>&lt;code>SDIFF key [key ...]&lt;/code> # 返回第一个集合有，且后续集合中不存在的元素，结合个数大于等于2，注意&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新：&lt;code>SADD&lt;/code>, &lt;code>SREM&lt;/code>
&lt;ul>
&lt;li>&lt;code>SADD&lt;/code> &amp;ndash; &amp;gt; 参考上文&lt;/li>
&lt;li>&lt;code>SREM key member [member ...]&lt;/code> # 删除元素，返回值为成功删除几个元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除：&lt;code>DEL&lt;/code>
&lt;ul>
&lt;li>&lt;code>DEL key&lt;/code> 删除元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>::: tip 详细Set命令
🔗 &lt;a href="https://redis.io/docs/latest/commands/?group=set">Set命令列表&lt;/a>
:::&lt;/p></description></item><item><title>Redis - Stream</title><link>https://chhz0.github.io/notes/database/redis/datatypes/stream/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/stream/</guid><description>&lt;h2 id="redis-stream-">Redis&amp;lt; Stream &amp;gt;&lt;/h2>
&lt;p>Redis Stream是一种数据结构，其作用类似于仅追加日志，但也实现了多种操作克服典型的仅追加日志的限制. 包括O(1)时间内的随机访问和复杂的消费策略&lt;/p>
&lt;p>Stream的使用示例：&lt;/p>
&lt;pre>&lt;code>1. 事件溯源(追踪用户操作、点击)；
2. 传感器健康;
3. 通知(将每个用户的通知存储在单独的流中)
&lt;/code>&lt;/pre>
&lt;p>Redis为每个流条目生成一个唯一ID，可以使用这些ID检索其关联条目或读取并处理流中的所有后续条目&lt;/p>
&lt;p>Redis支持多种修剪策略和多种消费策略&lt;/p>
&lt;h3 id="stream-命令">Stream 命令&lt;/h3>
&lt;ul>
&lt;li>&lt;code>XADD&lt;/code> # 将新条目添加到流中&lt;/li>
&lt;li>&lt;code>XREAD&lt;/code> # 读取一个或多个条目，从给定位置开始并及时向前移动&lt;/li>
&lt;li>&lt;code>XRANGE&lt;/code> # 返回两个提供的条目ID之间的条目范围&lt;/li>
&lt;li>&lt;code>XLEN&lt;/code> # 返回流的长度&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Redis Stream 详细请阅读
&lt;a href="https://redis.io/docs/latest/develop/data-types/streams/">Redis Stream&lt;/a>&lt;/p>&lt;/blockquote></description></item><item><title>Redis - String</title><link>https://chhz0.github.io/notes/database/redis/datatypes/string/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/string/</guid><description>&lt;h2 id="redis-string-">Redis&amp;lt; String &amp;gt;&lt;/h2>
&lt;p>Redis String 类型，存储字节，包括文本，序列化对象和二进制数组，因此 &lt;em>&lt;strong>String是Redis最基本的数据结构&lt;/strong>&lt;/em>. 通常用于&lt;strong>缓存&lt;/strong>，而且Redis支持其他功能，允许实现&lt;strong>计数器&lt;/strong>并执行按位运算.&lt;/p>
&lt;p>由于Redis中key是一个字符串，因此Redis使用String数据结构作为key的值.&lt;/p>
&lt;p>在默认情况下，Stirng最大为512MB，可以通过配置项&lt;code>proto-max-bulk-len&lt;/code>进行修改.&lt;/p>
&lt;h3 id="string-适用场景">String 适用场景&lt;/h3>
&lt;p>使用场景：一般用来存放字节数据、文本数据、序列化后的对象数据.&lt;/p>
&lt;ol>
&lt;li>缓存场景：Value存Json字符串等信息.&lt;/li>
&lt;li>计数场景：因为Redis处理命令是单线程，所以执行命令的过程是原子的，因此String数据结构适合计数场景.&lt;/li>
&lt;/ol>
&lt;h3 id="string-命令">String 命令&lt;/h3>
&lt;p>常用命令:&lt;/p>
&lt;ul>
&lt;li>创建 &amp;ndash;&amp;gt; &lt;code>set&lt;/code>, &lt;code>setnx&lt;/code>, &lt;code>getset&lt;/code>
&lt;ul>
&lt;li>&lt;code>SET key value&lt;/code> # 设置一个key值为特定的value&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>set命令扩展参数：
EX（键过期时间秒）、PX（键过期时间毫秒）、NX（只有键不存在时才对键进行操作，基本替代下面的SETNX操作）、XX（键存在时才对键进行操作）&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>SETNX key value&lt;/code> # 用于在指定的key不存在时，为key设置指定的值，对于实现锁很有用&lt;/li>
&lt;li>&lt;code>GETSET key value&lt;/code> # 设置一个key的值，并返回原来的值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询 &amp;ndash;&amp;gt; &lt;code>get&lt;/code>, &lt;code>mget&lt;/code>
&lt;ul>
&lt;li>&lt;code>Get key&lt;/code> # 查询某个key，存在就返回对应的value，不存在返回nil&lt;/li>
&lt;li>&lt;code>Mget key [key ...]&lt;/code> # 一次查询多个key，如果某个key不存在，对应位置返回nil&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新 &amp;ndash;&amp;gt; &lt;code>set&lt;/code>
&lt;ul>
&lt;li>见上面的set命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除 &amp;ndash;&amp;gt; &lt;code>del&lt;/code>
&lt;ul>
&lt;li>&lt;code>DEL key [key ...]&lt;/code> # 删除对象，返回值为删除成功了几行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其他命令：&lt;code>incr&lt;/code>, &lt;code>incrby&lt;/code>, &lt;code>incrbyfloat&lt;/code>&lt;/p></description></item><item><title>Redis - ZSet</title><link>https://chhz0.github.io/notes/database/redis/datatypes/zset/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/zset/</guid><description>&lt;h2 id="redis-zset-">Redis&amp;lt; ZSet &amp;gt;&lt;/h2>
&lt;p>Redis ZSet 是一个关联分数排序的唯一字符串集合. 当多个字符串具有相同分数时，字符串会按照字典顺序排列。&lt;/p>
&lt;p>&lt;code>ZSet&lt;/code>可以适用于:&lt;/p>
&lt;ul>
&lt;li>排行榜. 使用ZSet维护大型游戏中最高分数的有序列表.&lt;/li>
&lt;li>速率限制器. 使用ZSet构建滑动窗口速率限制器，以防止过多的API请求.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ZSet&lt;/code>可以视为是集合和哈希的混合，一方面，其与集合类似，由唯一的、不重复的字符串元素组成；另一方面，集合内元素没有排序，但是排序集合中每个元素都和一个浮点值相关联，也就是类似于哈希，每个元素映射一个值&lt;/p>
&lt;p>此外，排序集中的元素是按顺序获取的，这个顺序遵守以下规则：&lt;/p>
&lt;ol>
&lt;li>如果 B 和 A 是具有不同分数的两个元素，则如果 A.score 是 &amp;gt; B.score，则 A &amp;gt; B.&lt;/li>
&lt;li>如果 B 和 A 的分数完全相同，则如果 A 字符串按字典顺序大于 B 字符串，则 A &amp;gt; B。 B 和 A 字符串不能相等，因为排序集仅具有唯一元素&lt;/li>
&lt;/ol>
&lt;h3 id="zset-命令">ZSet 命令&lt;/h3>
&lt;p>ZSet常见命令：&lt;/p>
&lt;ul>
&lt;li>创建：&lt;code>ZADD&lt;/code>
&lt;ul>
&lt;li>&lt;code>ZADD key score member [score member]&lt;/code> # 向Sorted Set增加数据，如果key已经存在的Key，则更新对应的数据
&lt;ul>
&lt;li>扩展参数：XX, NX, LT, GT&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>查询：&lt;code>ZRANGE&lt;/code>, &lt;code>ZCOUNT&lt;/code>, &lt;code>ZRANK&lt;/code>, &lt;code>ZCARD&lt;/code>, &lt;code>ZSCORE&lt;/code>
&lt;ul>
&lt;li>&lt;code>ZCARD key&lt;/code> # 查看ZSet中的成员&lt;/li>
&lt;li>&lt;code>ZRANGE key start stop [WITHSCORES]&lt;/code> # 查询从start到stop范围的ZSet数据，WITHSCORES选填，不写输出里只有key，没有score值&lt;/li>
&lt;li>&lt;code>ZREVRANGE key start stop [WITHSCORES]&lt;/code> # 即reverse range，从大到小遍历，WITHSCORES选项，不写不会输出score&lt;/li>
&lt;li>&lt;code>ZCOUNT key min max&lt;/code> # 计算min-max积分范围的成员&lt;/li>
&lt;li>&lt;code>ZRANK key member&lt;/code> # 查看ZSet中member的排名索引，索引从0开始，所以排名是第一，索引就是0&lt;/li>
&lt;li>&lt;code>ZSCORE key member&lt;/code> # 查询ZSet成员的分数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>更新：&lt;code>ZADD&lt;/code>, &lt;code>ZREM&lt;/code>
&lt;ul>
&lt;li>&lt;code>ZREM key member [member ...]&lt;/code> # 删除ZSet中的元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除：&lt;code>DEL&lt;/code>, &lt;code>UNLINK&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>::: tip 详细ZSet命令
🔗 &lt;a href="https://redis.io/docs/latest/commands/?group=sorted-set">ZSets命令列表&lt;/a>
:::&lt;/p></description></item></channel></rss>