<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis - Encoding on ch.hugo</title><link>https://chhz0.github.io/notes/database/redis/datatypes/encoding/</link><description>Recent content in Redis - Encoding on ch.hugo</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Jun 2025 22:36:08 +0800</lastBuildDate><atom:link href="https://chhz0.github.io/notes/database/redis/datatypes/encoding/rss.xml" rel="self" type="application/rss+xml"/><item><title>Redis - Encoding&lt;HashTable></title><link>https://chhz0.github.io/notes/database/redis/datatypes/encoding/hashtable/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/encoding/hashtable/</guid><description>&lt;h2 id="redis-enc-hashtable-">Redis&amp;lt; enc-HashTable &amp;gt;&lt;/h2>
&lt;p>&lt;code>HASHTABLE&lt;/code>可以使用O(1)时间复杂度能够快速找到&lt;code>field&lt;/code>对应的&lt;code>value&lt;/code>，简单理解，&lt;code>HASHTABLE&lt;/code>是一个目录，可以帮助我们快速找到需要内容&lt;/p>
&lt;p>&lt;code>HASHTABLE&lt;/code>的结构:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> dictht {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dictEntry &lt;span style="color:#f92672">**&lt;/span>table;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> sizemask;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> used;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} dictht;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最外层封装一个&lt;code>dictht&lt;/code>结构，字段含义如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Table&lt;/code>: 指向实际hash存储。存储可以看做一个数组&lt;/li>
&lt;li>&lt;code>Size&lt;/code>: 哈希表大小，实际就是dictEntry有多少元素空间&lt;/li>
&lt;li>&lt;code>Sizemask&lt;/code>: 哈希表大小的掩码表示，总是等于size-1. 这个属性和哈希值一起决定一个键应该放到table数组的那个索引上面，规则 &lt;strong>Index = hash &amp;amp; sizemask&lt;/strong>.&lt;/li>
&lt;li>&lt;code>Used&lt;/code>: 表示已经使用的节点数量。通过这个字段可以查询目前HASHTABLE元素总量&lt;/li>
&lt;/ul>
&lt;p>&lt;code>dictEntry&lt;/code>结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> dictEntry {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> u64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int64_t&lt;/span> s64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> dictEntry &lt;span style="color:#f92672">*&lt;/span>next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>metadata[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} dictEntry;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://chhz0.github.io/redis/redis-encoding-hashtable-struct.drawio.svg" alt="redis-encodng-hashtable-struct">&lt;/p>
&lt;h3 id="hash-渐进式扩容缩容">Hash 渐进式扩容/缩容&lt;/h3>
&lt;h4 id="扩容">扩容&lt;/h4>
&lt;p>渐进式扩容就是一点一点扩大&lt;code>HASHTABLE&lt;/code>的容量，默认值为4 (#define DICT_HT_INTTIAL_SIZE 4)
为了实现渐进式扩容，Redis没有直接把dictht暴露给上层，而是再封装了一层&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> dict {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dictType &lt;span style="color:#f92672">*&lt;/span>type;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>privdata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dictht ht[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> rehashidx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> iterators;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} dict;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>dict&lt;/code>结构里面，包含了2个dictht结构，也就是2个HASHTABLE结构。&lt;/p></description></item><item><title>Redis - Encoding&lt;sds></title><link>https://chhz0.github.io/notes/database/redis/datatypes/encoding/sds/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/encoding/sds/</guid><description>&lt;h2 id="redis-enc-sds-">Redis&amp;lt; enc-SDS &amp;gt;&lt;/h2>
&lt;p>sds(Simple Synamic String)，简单动态字符串，是redis内部作为基石的字符串封装（很重要）&lt;/p>
&lt;p>sds是redis封装字符串结构，用以解决字符串追加和长度计算操作来带的性能瓶颈问题&lt;/p>
&lt;p>redis中SDS分为sdshdr8、sdshdr16、sdshdr32、sdshdr64，字段属性一致，区别再对应不同大小的字符串&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">__attribute__&lt;/span>((__packed__)) sdshdr8 {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> len; &lt;span style="color:#75715e">// 使用了多少内部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> alloc; &lt;span style="color:#75715e">// 分配了多少内存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> flags; &lt;span style="color:#75715e">// 标记是什么分类 例如： #define SDS_TYPE_8 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> buf[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的结构可以看出SDS是怎么解决问题的：&lt;/p>
&lt;ol>
&lt;li>增加len字段，快速返回长度&lt;/li>
&lt;li>增加空余空间(alloc - len)，为后续追加数据留余地&lt;/li>
&lt;li>不要以&amp;rsquo;\0&amp;rsquo;作为判断标准，二进制安全&lt;/li>
&lt;/ol>
&lt;p>SDS预留空间大小的规则：alloc = min(len, 1M) + len：&lt;/p>
&lt;ul>
&lt;li>len小于1M的情况下，alloc=2*len, 预留len大小的空间&lt;/li>
&lt;li>len大于1M的情况下，alloc=1M+lne, 预留1M大小的空间&lt;/li>
&lt;/ul></description></item><item><title>Redis - Encoding&lt;SkipList></title><link>https://chhz0.github.io/notes/database/redis/datatypes/encoding/skiplist/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/encoding/skiplist/</guid><description>&lt;h2 id="redis-enc-skiplist-">Redis&amp;lt; enc-SkipList &amp;gt;&lt;/h2>
&lt;p>跳表是Redis有序集合ZSet底层的数据结构&lt;/p>
&lt;p>redis中跳表的两处应用：&lt;/p>
&lt;pre>&lt;code>1. 实现有序集合键
2. 在集群节点中作为内部数据结构
&lt;/code>&lt;/pre>
&lt;p>从本质上看是链表，这种结构虽然简单清晰，但是查询某个节点的效率比较低，而在有序集合场景，无论是查找还是添加删除元素，我们是需要快速通过score定位到具体位置，如果是链表的话时间复杂度是O(N)&lt;/p>
&lt;p>为了提高查找的性能，Redis引入跳表，跳表在链表的基础上，给链表增加了多级的索引，通过索引可以一次实现多个节点的跳跃，提高性能&lt;/p>
&lt;h3 id="skiplist-结构">SKIPLIST 结构&lt;/h3>
&lt;p>Redis &lt;code>SKIPLIST&lt;/code> 单节点的结构:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> zskiplistNode {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sds ele;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> score;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> zskiplistNode &lt;span style="color:#f92672">*&lt;/span>backward;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> zskiplistLevel {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> zskiplistNode &lt;span style="color:#f92672">*&lt;/span>forward;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> span;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } level[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} zskiplistNode;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>字段的定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ele&lt;/code>: SDS结构，用来存储数据&lt;/li>
&lt;li>&lt;code>Score&lt;/code>: 节点的分数，浮点型数据&lt;/li>
&lt;li>&lt;code>Backward&lt;/code>: 指向上一个节点的回退指针，支持从表尾向表头遍历，也就是ZREVRANGE这个命令&lt;/li>
&lt;li>&lt;code>level&lt;/code>: 是个zskiplistLevel结构体数组，包含两个字段，一个是forward，指向该层下个能跳到的节点，span记录距离下个节点的步数，数组结构表示每个节点可能是多层结构&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在标准的跳表中，score值是不可重复的，但是在Redis ZIPLIST中，score值是可重复的，增加了回退指针&lt;/p>&lt;/blockquote>
&lt;h3 id="skiplist-细节">SKIPLIST 细节&lt;/h3>
&lt;ul>
&lt;li>Redis跳表单个节点有几层？&lt;/li>
&lt;/ul>
&lt;p>层次的决定，需要比较随机，才能在各个场景表现出较平均的性能，这里Redis使用概率均衡的思路来确定插入节点的层数：&lt;/p>
&lt;p>Redis跳表决定每一个节点，是否能增加一层的概率为25%，而最大层数限制在Redis 5.0是64层，在Redis 7.0是32层&lt;/p>
&lt;ul>
&lt;li>Redis跳表的性能优化了多少？&lt;/li>
&lt;/ul>
&lt;p>平均时间复杂度为O(log(n))，跳表的最坏平均时间复杂度是O(N)，当然实际的生产过程中，体现出来的基本是跳表的平均时间复杂度&lt;/p></description></item><item><title>Redis - Encoding&lt;ZipList></title><link>https://chhz0.github.io/notes/database/redis/datatypes/encoding/ziplist/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/datatypes/encoding/ziplist/</guid><description>&lt;h2 id="redis-enc-ziplist-">Redis&amp;lt; enc-ZipList &amp;gt;&lt;/h2>
&lt;p>&lt;code>ZIPLIST&lt;/code>压缩列表，是排列紧凑的列表，为Redis供紧凑型的数据存储方式，能节约内存（节省链表指针的开销），数据量小的时候遍历访问性能好（连续+缓存命中率友好）&lt;/p>
&lt;p>关于&lt;code>LISTPACK&lt;/code>是Redis 5.0引入，Redis 7.0完全替代&lt;code>ZIPLIST&lt;/code>.&lt;/p>
&lt;h3 id="ziplsit-整体结构">ZIPLSIT 整体结构&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>// redis代码注释，描述了ZIPLIST的结构
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;zlbytes&amp;gt; &amp;lt;zltail&amp;gt; &amp;lt;zllen&amp;gt; &amp;lt;entry&amp;gt; &amp;lt;entry&amp;gt; ... &amp;lt;entry&amp;gt; &amp;lt;zlend&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>各字段定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>zlbytes&lt;/code>: 表示该ZIPLIST一共占了多少字节，这个数字是包含zlbytes本身占据的字节的&lt;/li>
&lt;li>&lt;code>zltail&lt;/code>: ZIPLIST尾巴节点，相对于ZIPLIST的开头，偏移的字节数&lt;/li>
&lt;li>&lt;code>zllen&lt;/code>: 表示有多少个数据节点&lt;/li>
&lt;li>&lt;code>entry&lt;/code>: 表示压缩列表的数据节点&lt;/li>
&lt;li>&lt;code>zlend&lt;/code>: 一个特殊的entry节点，为1个字节&lt;code>11111111&lt;/code>即255占据，表示ZIPLIST的结束&lt;/li>
&lt;/ul>
&lt;h3 id="ziplist-节点结构---entrys">ZIPLIST 节点结构 - entrys&lt;/h3>
&lt;p>其定义如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> * &amp;lt;prevlen&amp;gt; &amp;lt;encoding&amp;gt; &amp;lt;entry-data&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>各字段含义：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>prevlen&lt;/code>: 表示前一个节点的长度。通过该节点定位到前一个节点的起始地址，如果前一个节点是压缩列表的开头，那么这个字段的值为0，通过该字段，可以实现往前操作，即&lt;code>ZIPLIST&lt;/code>可以从后往前遍历.&lt;/p>
&lt;blockquote>
&lt;p>有关上一个&lt;code>entry&lt;/code>的长度，从&lt;code>prevlen&lt;/code>字段可以获得，根据&lt;code>entry&lt;/code>的大小，&lt;code>prevlen&lt;/code>所占字节也会有所变化:&lt;/p>
&lt;ul>
&lt;li>entry &amp;lt; 254 : &lt;code>prevlen&lt;/code>为1字节，(值得注意的是255在entry中是个特殊数字，被&lt;code>zlend&lt;/code>使用，表示&lt;code>ZIPLIST&lt;/code>的结束)&lt;/li>
&lt;li>entry &amp;gt;= 254 : &lt;code>prevlen&lt;/code>为5字节，在这5个字节中，第一个字节作为标志位，固定为&lt;code>11111110&lt;/code>，表示&lt;code>prevlen&lt;/code>是5个字节，后面4个字节才是&lt;code>prevlen&lt;/code>记录的上一个节点长度.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>encoding&lt;/code>: 编码类型，包含了entry的长度信息，用于正序遍历.&lt;/p>
&lt;blockquote>
&lt;p>encoding是一个整型数据，其二进制数据由&lt;code>entry-data&lt;/code>的类型和字节长度组成&lt;/p>
&lt;ul>
&lt;li>如果是string类型，那么encoding由两部分，前几位为标识位、后几位标识长度&lt;/li>
&lt;li>如果是int类型，整体1字节编码，那么仅标识类型，根据不同的int类型，确定其长度，例如int32就是32位，4字节&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>entry-data&lt;/code>: 实际的数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="ziplist-查询数据">ZIPLIST 查询数据&lt;/h3>
&lt;ul>
&lt;li>获取节点数量
&lt;code>ZIPLIST&lt;/code>可以在O(1)时间复杂度返回节点数量，因为其header定义了记录节点数量的&lt;code>zllen&lt;/code>，但是&lt;code>zllen&lt;/code>仅占2字节长度，最大记录&lt;strong>65534&lt;/strong>，当节点数量超过65535时，就需要通过遍历节点获取节点数量.&lt;/li>
&lt;/ul>
&lt;p>之所以zllen是2个字节，原因是redis中应用ZIPLIST是为了节点个数少的场景，所以将zllen设计得比较小，节约内存空间&lt;/p></description></item></channel></rss>