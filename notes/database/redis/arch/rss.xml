<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis - Arch on ch.hugo</title><link>https://chhz0.github.io/notes/database/redis/arch/</link><description>Recent content in Redis - Arch on ch.hugo</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 10 Jun 2025 22:36:08 +0800</lastBuildDate><atom:link href="https://chhz0.github.io/notes/database/redis/arch/rss.xml" rel="self" type="application/rss+xml"/><item><title>Redis - Multi Thread</title><link>https://chhz0.github.io/notes/database/redis/arch/multi-thread/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/arch/multi-thread/</guid><description>&lt;blockquote>
&lt;p>Redis 多线程持久化 | IO复用&lt;/p>&lt;/blockquote>
&lt;h2 id="redis-多线程持久化">Redis 多线程持久化&lt;/h2>
&lt;p>Redis多线程模型&lt;/p>
&lt;p>redis一开始就是基于单线程模型，Redis里所有的数据结构都是非线程安全，规避了数据竞争问题，使得Redis对各种数据结构的操作非常简单&lt;/p>
&lt;blockquote>
&lt;p>redis选择单线程的核心原因是Redis都是内存操作，CPU处理都非常快，瓶颈更容易出现在I/O而不是CPU，所以选择了单线程模型&lt;/p>&lt;/blockquote>
&lt;p>随着数据量的增大，redis的瓶颈更容易出现在I/O而不是CPU&lt;/p>
&lt;p>因为上述情况，Redis选择了引入多线程来处理网络I/O，这样即保持了Redis核心的单线程处理价格，又引入了多线程解决提高网络I/O的性能&lt;/p></description></item><item><title>Redis - redisDB</title><link>https://chhz0.github.io/notes/database/redis/arch/redisdb/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/arch/redisdb/</guid><description>&lt;blockquote>
&lt;p>Redis是一个基于内存的数据库，数据存储在内存中，以键值对的形式存储.&lt;/p>&lt;/blockquote>
&lt;h2 id="redis-数据库结构">Redis 数据库结构&lt;/h2>
&lt;p>Redis的数据库结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// redisDb 结构
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>type &lt;span style="color:#66d9ef">struct&lt;/span> redisDb {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dict &lt;span style="color:#f92672">*&lt;/span>dict; &lt;span style="color:#75715e">//字典
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> dict &lt;span style="color:#f92672">*&lt;/span>expires; &lt;span style="color:#75715e">// 过期键
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> dict &lt;span style="color:#f92672">*&lt;/span>blocking_keys;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dict &lt;span style="color:#f92672">*&lt;/span>ready_keys;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dict &lt;span style="color:#f92672">*&lt;/span>watched_keys;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> avg_ttl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list &lt;span style="color:#f92672">*&lt;/span>defrag_later;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} redisDb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// dict 结构
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> dict {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dictType &lt;span style="color:#f92672">*&lt;/span>type;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>privdata;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dictht ht[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> rehashidx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> iterators;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} dict;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>redisDb&lt;/code> 代表Redis数据库结构，各种操作对象，都存储在dict数据结构里.&lt;/p>
&lt;ul>
&lt;li>&lt;code>dict&lt;/code> 是Redis的字典结构，存储键值对.&lt;/li>
&lt;li>&lt;code>expires&lt;/code> 是Redis的过期键字典结构，存储过期键.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chhz0.github.io/redis/redis-redisDb-struct.drawio.svg" alt="redis-redisDb-struct">&lt;/p>
&lt;h3 id="操作redis在内存中的表现">操作Redis在内存中的表现&lt;/h3>
&lt;ul>
&lt;li>&lt;code>添加数据&lt;/code> # 即添加键值对，添加到dict结构字典中，Key必须为String对象，value为任何类型的对象，添加数据后，会在redisDb里字段dict上添加dict对象&lt;/li>
&lt;li>&lt;code>查询数据&lt;/code> # 直接在dict找到对应的key，即完成查询&lt;/li>
&lt;li>&lt;code>更新数据&lt;/code> # 对已经Key对象的任何变更操作，都是更新&lt;/li>
&lt;li>&lt;code>删除数据&lt;/code> # 删除即把key和value从dict结构里删除&lt;/li>
&lt;/ul>
&lt;h3 id="关于过期键-expireskey">关于过期键 expiresKey&lt;/h3>
&lt;p>Redis可以设置过期键，到达一定时间，这些对象会被自动过期并回收&lt;/p></description></item><item><title>Redis - Single Thread</title><link>https://chhz0.github.io/notes/database/redis/arch/single-thread/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/arch/single-thread/</guid><description>&lt;blockquote>
&lt;p>Redis的单线程模型&lt;/p>&lt;/blockquote>
&lt;h2 id="redis-单线程模型">Redis 单线程模型&lt;/h2>
&lt;p>redis是一个能高效处理请求的组件&lt;/p>
&lt;p>核心处理逻辑：Redis一直都是单线程，其他辅助模块会有一些多线程、多进程的功能，例如：复制模块用的多进程；某些异步流程从4.0开始用多线程；网络I/O解包从6.0开始用多线程；&lt;/p>
&lt;blockquote>
&lt;p>Redis在处理客户端的请求时，包括获取（socket写）、解析、执行、内容返回等都是由一个顺序串行的主线程处理，这就是所谓的单线程&lt;/p>&lt;/blockquote>
&lt;h3 id="redis-单线程的选择">Redis 单线程的选择&lt;/h3>
&lt;p>Redis的定位是内存k-v存储，是做短平快的热点数据处理，一般来说执行会很快，执行本身不会成为瓶颈，瓶颈通常在网络I/O，处理逻辑多线程并不会有太大收益&lt;/p>
&lt;p>同时Redis本身秉持简洁高效的理念，代码的简单性、可维护性是redis一直依赖的追求，执行本身不应该成为瓶颈，而且多线程本身也会引起额外成本&lt;/p>
&lt;h4 id="引入多线程带来复杂度和额外成本">引入多线程带来复杂度和额外成本&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>多线程引入的复杂度是极大的&lt;/p>
&lt;ul>
&lt;li>多线程引入后，redis原来的顺序执行特性就不复存在，为了事务的原子性、隔离性，redis就不得不引入一些很复杂的实现&lt;/li>
&lt;li>redis的数据结构是极其高效，在单线程模式下做了很多特性的优化，如果引入多线程，那么所有底层数据都要改为线性安全，这很复杂&lt;/li>
&lt;li>多线程模式使得程序调试更加复杂和麻烦，会带来额外的开发成本及运营成本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>多线程带来额外的成本&lt;/p>
&lt;ul>
&lt;li>上下文切换成本，多线程调度需要切换线程上下文，这个操作先存储当前线程的本地数据，程序指针，然后载入另一个线程数据，这种内核操作的成本不可忽略&lt;/li>
&lt;li>同步机制的开销，一些公共资源，在单线程模式下直接访问就行，多线程需要通过加锁等方式进行同步&lt;/li>
&lt;li>一个线程本身也占据内存大小，对redis这种内存数据库来说，内存非常珍贵，多线程本身带来的内存使用的成本也需要谨慎决策&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="redis-单线程的高性能">Redis 单线程的高性能&lt;/h3>
&lt;p>Redis 核心的请求处理是&lt;code>单线程&lt;/code>，但是Redis却能使用单线程模型达到每秒数万级别的处理能力，这是Redis多方面极致设计的一个综合结果.&lt;/p>
&lt;ol>
&lt;li>Redis的大部分操作在内存上完成，内存操作本身就特别快&lt;/li>
&lt;li>Redis选择了很多高效的数据结构，并做了很多优化，比如&lt;code>ziplist&lt;/code>，&lt;code>hash&lt;/code>，&lt;code>skiplist&lt;/code>等，有时候一种对象底层有几种实现以应对不同场景&lt;/li>
&lt;li>Redis采用了多路复用机制，使其在网络IO操作中能并发处理大量的客户端请求，实现高吞并量&lt;/li>
&lt;/ol>
&lt;h4 id="redis-io多路复用">Redis I/O多路复用&lt;/h4>
&lt;p>Redis在内存中处理数据，其性能瓶颈更多是在I/O&lt;/p>
&lt;p>Redis的I/O多路复用机制，是指Redis在处理客户端请求时，通过使用操作系统提供的I/O多路复用功能，实现同时处理多个客户端的请求，而不是阻塞等待每个请求的处理完成&lt;/p>
&lt;p>Redis做了一层包装，叫&lt;code>Reactor模型&lt;/code>，本质就是监听各种事件，当事件发生时，将事件分发给不同的处理器&lt;/p>
&lt;p>&lt;img src="https://chhz0.github.io/redis/redis-reactor.drawio.svg" alt="redis-reactor">&lt;/p>
&lt;p>I/O多路复用让redis单线程有了较大的并发度，这里是并发，不是并行，这种模式下，Redis单核的性能可以是被充分利用&lt;/p></description></item><item><title>Redis - 过期淘汰算法</title><link>https://chhz0.github.io/notes/database/redis/arch/lru-lfu/</link><pubDate>Tue, 10 Jun 2025 22:36:08 +0800</pubDate><guid>https://chhz0.github.io/notes/database/redis/arch/lru-lfu/</guid><description>&lt;blockquote>
&lt;p>Redis 中使用的过期淘汰算法 LRU &amp;amp;&amp;amp; LFU&lt;/p>&lt;/blockquote>
&lt;h2 id="redis-过期淘汰算法">Redis 过期淘汰算法&lt;/h2></description></item></channel></rss>