<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机网络 on ch.hugo</title><link>https://chhz0.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><description>Recent content in 计算机网络 on ch.hugo</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 31 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://chhz0.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/rss.xml" rel="self" type="application/rss+xml"/><item><title>[计网] HTTP</title><link>https://chhz0.github.io/notes/cs/net/http/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://chhz0.github.io/notes/cs/net/http/</guid><description>&lt;p>接下来将从以下6个方面，逐渐学习和了解HTTP&lt;/p>
&lt;ol>
&lt;li>HTTP基本概念&lt;/li>
&lt;li>Get与Post&lt;/li>
&lt;li>HTTP特征&lt;/li>
&lt;li>HTTP缓存&lt;/li>
&lt;li>HTTPS与HTTP&lt;/li>
&lt;li>HTTP/1.1、HTTP/2、HTTP/3演变&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=YzgxNTk2MGIwMjM0ODdhZWNiYjM1YTdhNTM0NTMwOTJfaDdMekY5THZXQ0plelVaR2lCV1ZWWGptTUZISUMzcElfVG9rZW46TU5pOWJ0elBEbzVIa0p4bzdvTGM1N1VybkxoXzE3MjE4Mzk5Nzc6MTcyMTg0MzU3N19WNA" alt="">&lt;/p>
&lt;h2 id="http基本概念">&lt;strong>HTTP基本概念&lt;/strong>&lt;/h2>
&lt;hr>
&lt;h3 id="1http是什么">&lt;strong>1.HTTP是什么？&lt;/strong>&lt;/h3>
&lt;blockquote>
&lt;p>HTTP是超文本传输协议，也就是&lt;strong>HyperText&lt;/strong> &lt;strong>Transfer Protocol&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>HTTP的名字【超文本传输协议】，可以拆成三个部分：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>超文本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传输&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协议&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=MWVjMWE4ZmI3M2M3YjczMWRmMDE3OWVmZjUwYTE0ODBfRXhVcm5qbEUxNlZaVGpid3I5Z25sQTJzV1ZlSVpGUTdfVG9rZW46UHhGZGJVNFI2b25hWDl4TmlsS2NoaVI2bjJpXzE3MjE4Mzk5Nzc6MTcyMTg0MzU3N19WNA" alt="">&lt;/p>
&lt;p>针对 HTTP &lt;strong>协议&lt;/strong>，我们可以这么理解。&lt;/p>
&lt;ol start="7">
&lt;li>&lt;em>「协议」&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>HTTP 是一个用在计算机世界里的&lt;strong>协议&lt;/strong>。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（&lt;strong>两个以上的参与者&lt;/strong>），以及相关的各种控制和错误处理方式（&lt;strong>行为约定和规范&lt;/strong>）。&lt;/p>
&lt;ol start="8">
&lt;li>&lt;em>「传输」&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>HTTP 协议是一个&lt;strong>双向协议&lt;/strong>。&lt;/p>
&lt;p>针对&lt;strong>传输&lt;/strong>，我们可以进一步理解了 HTTP。&lt;/p>
&lt;p>HTTP 是一个在计算机世界里专门用来在&lt;strong>两点之间传输数据&lt;/strong>的约定和规范。&lt;/p>
&lt;ol start="9">
&lt;li>&lt;em>「超文本」&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>HTTP 传输的内容是「超文本」。&lt;/p>
&lt;p>理解「超文本」，它就是&lt;strong>超越了普通文本的文本&lt;/strong>，它是文字、图片、视频等的混合体，最关键有超链接，能从一个超文本跳转到另外一个超文本。&lt;/p>
&lt;p>&lt;strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>HTTP是用于从互联网服务器传输超文本到本地浏览器的协议，这个说法是错误的，因为HTTP也可以服务于【服务器&amp;lt;&amp;mdash;&amp;gt;服务器】，所有采用&lt;strong>两点之间&lt;/strong>的描述比较准确&lt;/p>&lt;/blockquote>
&lt;h3 id="2http常见的状态码">&lt;strong>2.HTTP常见的状态码&lt;/strong>&lt;/h3>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=NzMzNjU4MzA0ZWM3ZGY0ZWRjM2MzOWQyMzA1NmIyMjJfN01YaTBhejQ1RVlOMFdWcWphQXNXaHNLYUhGekNOWFdfVG9rZW46WFRQcGJWUWdBb1VYdVp4YmM2ZWNWdmd0bnJjXzE3MjE4Mzk5Nzc6MTcyMTg0MzU3N19WNA" alt="">&lt;/p>
&lt;p>&lt;code>1xx&lt;/code> 类状态码属于&lt;strong>提示信息&lt;/strong>，是协议处理中的一种中间状态，实际用到的比较少。&lt;/p>
&lt;p>&lt;code>2xx&lt;/code> 类状态码表示服务器&lt;strong>成功&lt;/strong>处理了客户端的请求，也是我们最愿意看到的状态。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>「&lt;strong>200 OK&lt;/strong>」是最常见的成功状态码，表示一切正常。如果是非 &lt;code>HEAD&lt;/code> 请求，服务器返回的响应头都会有 body 数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>204 No Content&lt;/strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「&lt;strong>206 Partial Content&lt;/strong>」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>3xx&lt;/code> 类状态码表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是&lt;strong>重定向&lt;/strong>。&lt;/p></description></item><item><title>[计网] 键入网址的过程</title><link>https://chhz0.github.io/notes/cs/net/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E7%9A%84%E8%BF%87%E7%A8%8B/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://chhz0.github.io/notes/cs/net/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E7%9A%84%E8%BF%87%E7%A8%8B/</guid><description>&lt;h2 id="当键入网址后到网页显示期间发生了什么">当键入网址后，到网页显示，期间发生了什么？&lt;/h2>
&lt;h3 id="http">&lt;strong>HTTP&lt;/strong>&lt;/h3>
&lt;blockquote>
&lt;p>浏览器做的第一步工作是&lt;strong>解析****URL&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>首先浏览器做的第一步工作就是要对&lt;code>URL&lt;/code>进行解析，从而生成发生给&lt;code>Web&lt;/code>服务器的请求信息&lt;/p>
&lt;p>在一条长长的URL里的各个元素的代表是什么&lt;/p>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=NWQ4MGEyMTY1MWRiNGE0MjliMjBhNTRhNmM3OTkwOWZfS0tDMENDOUNRb05hZkxXZ0JJNkZIZWRFTklGZDI5R1VfVG9rZW46RnF1TWJpVklTb0pUSUR4Njg3N2NMVGRvbkZlXzE3MjE4Mzk5MzY6MTcyMTg0MzUzNl9WNA" alt="">&lt;/p>
&lt;blockquote>
&lt;p>这里的URL实际上是请求服务器里的文件资源&lt;/p>
&lt;p>当上图的蓝色部分URL元素都省略了，那么请求的是哪个文件呢？&lt;/p>&lt;/blockquote>
&lt;p>当没有路径名时，就代表访问根目录下事先设置的&lt;strong>默认文件&lt;/strong>，也就是&lt;code>/index.html&lt;/code>或者&lt;code>/default.html&lt;/code>这些文件，这样就不好发生混乱&lt;/p>
&lt;blockquote>
&lt;p>生产HTTP请求信息&lt;/p>&lt;/blockquote>
&lt;p>对&lt;code>URL&lt;/code>进行解析之后，浏览器确定了Web服务器和文件名，接下来就是根据这些信息来生产HTTP请求信息&lt;/p>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=YjQ5OTZhMDE0M2U1NDg3YjkxOGM0YTBlMmZmZGNhODNfSU5nQW93c3pXYUppT1FKaGJ4WWd1VEZrU0hIUVVDd2JfVG9rZW46R1U3bWJ4aTZ6b0l5b1Z4VzdUUmN1a1FlblFQXzE3MjE4Mzk5MzY6MTcyMTg0MzUzNl9WNA" alt="">&lt;/p>
&lt;h3 id="真实地址查询dns">&lt;strong>真实地址查询——DNS&lt;/strong>&lt;/h3>
&lt;hr>
&lt;p>通过浏览器解析URL并生成HTTP消息后，需要委托操作系统将消息发送给&lt;code>Web&lt;/code>服务器&lt;/p>
&lt;p>但是在发送之前，还需要&lt;strong>查询服务器域名对应的IP地址&lt;/strong>，因为委托操作系统发送消息时，必须提供通信对象的IP地址&lt;/p>
&lt;p>这里，有一种服务器就专门保存了&lt;code>Web&lt;/code>服务器域名与&lt;code>IP&lt;/code>的对应关系——DNS服务器&lt;/p>
&lt;blockquote>
&lt;p>域名的层级关系&lt;/p>&lt;/blockquote>
&lt;p>DNS中的域名都是用&lt;strong>句点&lt;/strong>来分隔的，比如&lt;code>www.server.com&lt;/code>，这里的句点带不了不同层次之间的界限&lt;/p>
&lt;p>在域名中，&lt;strong>越靠右&lt;/strong>的位置表示其&lt;strong>层级越高&lt;/strong>&lt;/p>
&lt;p>实际上&lt;strong>域名&lt;/strong>最后还有一个点，比如&lt;code>www``.server.com.&lt;/code>，这个最后一个点代表根域名&lt;/p>
&lt;p>也就是说，&lt;code>.&lt;/code>根域是最顶层，它的下一层是&lt;code>.com&lt;/code>顶级域,再下面是&lt;code>server.com&lt;/code>&lt;/p>
&lt;p>所以，域名的层级关系类似一个树状结构&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根DNS服务器&lt;code>.&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顶级域DNS服务器&lt;code>.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>权威DNS服务器&lt;code>server.com&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=YzA0NDVhMjA2MDAxMDFkNTUxNTg4Yzg2MDhlYjk0ZTRfcVJsVzU0WHl0cXZFT1h5WHpDMEpjYnlRWnkxSEhWUkNfVG9rZW46RUhFTWIwWFBFb04yZ3V4RHVNSGM1V0dBbnc0XzE3MjE4Mzk5MzY6MTcyMTg0MzUzNl9WNA" alt="">&lt;/p>
&lt;blockquote>
&lt;p>根域的DNS服务器信息保存在互联网中所有的DNS服务器中，这样一来任何DNS服务器都可以找到并访问根域DNS服务器&lt;/p>
&lt;p>因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。&lt;/p>
&lt;p>域名解析的工作流程&lt;/p>&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>客户端&lt;/strong>首先会发出一个DNS请求，问&lt;a href="http://www.server.com">www.server.com&lt;/a>的IP是啥，并发给本地DNS服务器（也就是客户端的TCP/IP设置中填写的DNS服务器地址）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地域名服务器收到客户端的请求后，如果&lt;strong>缓存里的表格&lt;/strong>能找到&lt;a href="http://www.server.com">www.server.com&lt;/a>，则直接返回IP地址，如果没有，本地DNS会去问它的根域名服务器， 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根DNS收到本地DNS的请求后，根据&lt;a href="http://www.server.com">www.server.com&lt;/a>的后置是&lt;code>.com&lt;/code>，这个域名归于&lt;code>.com&lt;/code>区域管理，返回&lt;code>.com&lt;/code>顶级域名服务器地址给本地&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地DNS收到顶级域名服务器地址后，向顶级域名服务器请求负责&lt;a href="http://www.server.com">www.server.com&lt;/a>的权威DNS服务器的地址，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地DNS最后向权威DNS服务器请求&lt;a href="http://www.server.com">www.server.com&lt;/a>的IP地址，该server.com的权威服务器就是域名解析结果的出处。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>权威DNS服务器查询结后将对应的IP地址X.X.X.X返回到本地DNS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地DNS再将IP地址返回客户端，客户端和目标建立连接&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>至此，DNS的解析过程完成了，其过程可见下图&lt;/p>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjI2MmYzMWEzODdiOWY0YjcxMjZjMmEzZmUzNzEwZDFfTENsN3NZRWxDc1pVVlpKaTB3RzJwWEpGOEdhU1NBYU5fVG9rZW46SE9EVmJ5NzFlb3VHdlV4cHBPV2NiRVZ5bjZnXzE3MjE4Mzk5MzY6MTcyMTg0MzUzNl9WNA" alt="">&lt;/p>
&lt;blockquote>
&lt;p>域名解析并不是每次都需要经过这么多步骤&lt;/p>&lt;/blockquote>
&lt;p>还有&lt;strong>缓存&lt;/strong>的存在。&lt;/p>
&lt;p>浏览器会先看自身有没有对这个域名的缓存，如果有，就直接返回，如果没有，就去问操作系统，操作系统也会去看自己的缓存，如果有，就直接返回，如果没有，再去 hosts 文件看，也没有，才会去问「本地 DNS 服务器」。&lt;/p>
&lt;h3 id="协议栈">&lt;strong>协议栈&lt;/strong>&lt;/h3>
&lt;hr>
&lt;p>通过DNS获取IP后，就可以把HTTP的传输工具交给操作系统中的&lt;strong>协议栈&lt;/strong>&lt;/p>
&lt;p>协议栈的内部分为几个部分，分别承担不同的工作。上下关系是有一定的规则的，上面的部分会向下面的部分委托工作，下面的部分收到委托的工作并执行。&lt;/p>
&lt;p>&lt;img src="https://rt5bap83jl.feishu.cn/space/api/box/stream/download/asynccode/?code=OTJiYWJjOTQwZjU3YTI3ODUyMWExMzU2MTlhNjkxZTNfaU5halB3SXMwdzRTdTdXVUVWQnBPYjhTWnpIN1ZEbWhfVG9rZW46WDJTQWIyU3R6b1RvQzN4aGc2OWNWczZJblNiXzE3MjE4Mzk5MzY6MTcyMTg0MzUzNl9WNA" alt="">&lt;/p>
&lt;p>应用程序（浏览器）通过调用 Socket 库，来委托协议栈工作。协议栈的上半部分有两块，分别是负责收发数据的 TCP 和 UDP 协议，这两个传输协议会接受应用层的委托执行收发数据的操作。&lt;/p>
&lt;p>协议栈的下面一半是用 IP 协议控制网络包收发操作，在互联网上传数据时，数据会被切分成一块块的网络包，而将网络包发送给对方的操作就是由 IP 负责的。&lt;/p></description></item></channel></rss>