<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on ch.hugo</title><link>https://chhz0.github.io/categories/projects/</link><description>Recent content in Projects on ch.hugo</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 08 Apr 2025 13:59:43 +0800</lastBuildDate><atom:link href="https://chhz0.github.io/categories/projects/rss.xml" rel="self" type="application/rss+xml"/><item><title>Goose</title><link>https://chhz0.github.io/blogs/2025-04-08.goose/</link><pubDate>Tue, 08 Apr 2025 13:59:43 +0800</pubDate><guid>https://chhz0.github.io/blogs/2025-04-08.goose/</guid><description>&lt;p>Goose 是一个 Go 语言包，提供了一系列快速构建服务的工具。&lt;/p>



&lt;a href="https://github.com/chhz0/goose" target="_blank" rel="noopener noreferrer">
 &lt;img src="https://github-readme-stats.vercel.app/api/pin/?username=chhz0&amp;repo=goose" alt="goose GitHub stats">
&lt;/a>

&lt;h2 id="设计原则">设计原则&lt;/h2>
&lt;ol>
&lt;li>约定优于配置 - 提供合理的默认值&lt;/li>
&lt;li>模块化设计 - 可插入函数&lt;/li>
&lt;li>易于使用 - 简单直观的 API&lt;/li>
&lt;li>可扩展性 - 允许用户替换默认实现&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>设计模式：
&lt;ul>
&lt;li>构建器模式&lt;/li>
&lt;li>新功能和功能选项模式&lt;/li>
&lt;li>上下文模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用声明式编程风格&lt;/li>
&lt;/ul></description></item><item><title>Bitcask</title><link>https://chhz0.github.io/blogs/bitcask/2025-04-05.bitcask-core/</link><pubDate>Sat, 05 Apr 2025 15:07:38 +0800</pubDate><guid>https://chhz0.github.io/blogs/bitcask/2025-04-05.bitcask-core/</guid><description>&lt;p>Bitcask是一个高性能的键值存储系统，设计之初的目的是提供高写入吞吐量和高效读取性能。采用了日志化结构哈希表(Log-Structured Hash Table)，核心是写前日志(WAL)、内存哈希表和定期merge.&lt;/p>
&lt;p>具体细节均在官方的设计论文 &lt;a href="https://riak.com/assets/bitcask-intro.pdf">Bitcask Design Paper&lt;/a> 中可以查看。&lt;/p>
&lt;blockquote>
&lt;p>官方论文中提到的bitcask应该具备的特性&lt;/p>
&lt;ul>
&lt;li>low latency per item read or written&lt;/li>
&lt;li>high throughput, especially when writing an incoming stream of random items&lt;/li>
&lt;li>ability to handle datasets much larger than RAM w/o degradation&lt;/li>
&lt;li>crash friendliness, both in terms of fast recovery and not losing data&lt;/li>
&lt;li>ease of backup and restore&lt;/li>
&lt;li>a relatively simple, understandable (and thus supportable) code structure and data format&lt;/li>
&lt;li>predictable behavior under heavy access load or large volume&lt;/li>
&lt;li>a license that allowed for easy default use in Riak&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>目前已经有优秀的开源实现：&lt;/p></description></item></channel></rss>