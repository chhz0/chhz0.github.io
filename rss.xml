<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>&lt;ch'ang/></title><link>https://chhz0.github.io/</link><description>Recent content on &lt;ch'ang/></description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 15 Sep 2025 15:29:25 +0800</lastBuildDate><atom:link href="https://chhz0.github.io/rss.xml" rel="self" type="application/rss+xml"/><item><title>Golang/Context</title><link>https://chhz0.github.io/posts/golang/context/</link><pubDate>Mon, 15 Sep 2025 15:29:25 +0800</pubDate><guid>https://chhz0.github.io/posts/golang/context/</guid><description>&lt;blockquote>
&lt;p>&lt;code>Context&lt;/code> 是&lt;strong>Go&lt;/strong>语言于&lt;strong>v1.7&lt;/strong>引入，用于在&lt;code>goroutine&lt;/code>中传递截止时间、取消信号和其他请求范围值的标准库，也是Go语言的一个特殊机制.&lt;/p>&lt;/blockquote>
&lt;h2 id="为什么需要-context-">为什么需要 Context ？&lt;/h2>
&lt;p>在经典的网络服务器中，每个传入的请求都在一个单独的&lt;code>goroutine&lt;/code>中处理，这里处理过程可能涉及到多个下游调用，例如访问数据库、调用 RPC 服务等，这时会面临几个问题：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>请求取消&lt;/strong>：如果客户端连接关闭或者请求超时，那么需要关闭所有相关的 &lt;code>goroutine&lt;/code> ，避免资源浪费.&lt;/li>
&lt;li>&lt;strong>超时控制&lt;/strong>：某些操作需要明确的执行时间，超过该时间该停止，并返回超时错误.&lt;/li>
&lt;li>&lt;strong>数据传递&lt;/strong>：在整个请求链中，共享一些数据（例如：user_id, trace_id&amp;hellip;），需要一种安全的方式将共享的数据传递到各个函数，同时不污染函数签名.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>context.Context&lt;/code> 正是为了优雅解决这些问题，提供了一个在 API 边界之间和 &lt;code>goroutine&lt;/code> 之间传递“元数据”的标准方式.&lt;/p>
&lt;h2 id="context-的核心原理">Context 的核心原理&lt;/h2>
&lt;h3 id="context-接口">Context 接口&lt;/h3>
&lt;p>&lt;code>context&lt;/code> 包的核心是 &lt;code>Context&lt;/code> 接口，它定义了四个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c678dd">type&lt;/span> &lt;span style="color:#e06c75">Context&lt;/span> &lt;span style="color:#c678dd">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Deadline 返回一个时间点，当到达该时间点后，Context 将被自动取消。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果没有设置 Deadline，ok 将返回 false。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">Deadline&lt;/span>() (&lt;span style="color:#e06c75">deadline&lt;/span> &lt;span style="color:#e06c75">time&lt;/span>.&lt;span style="color:#e06c75">Time&lt;/span>, &lt;span style="color:#e06c75">ok&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Done 返回一个 channel。当 Context 被取消或超时时，该 channel 会被关闭。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果 Context 不可取消，Done() 可能返回 nil。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">Done&lt;/span>() &lt;span style="color:#56b6c2">&amp;lt;-&lt;/span>&lt;span style="color:#c678dd">chan&lt;/span> &lt;span style="color:#c678dd">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Err 在 Done() channel 关闭后，返回 Context 被取消的原因。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 如果 Context 未被取消，返回 nil。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 常见原因为 context.Canceled 和 context.DeadlineExceeded。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">Err&lt;/span>() &lt;span style="color:#e5c07b">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// Value 返回与该 Context 关联的键（key）对应的值（value）。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#7f848e">// 主要用于在请求处理链中传递请求范围的数据。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#61afef;font-weight:bold">Value&lt;/span>(&lt;span style="color:#e06c75">key&lt;/span> &lt;span style="color:#e5c07b">any&lt;/span>) &lt;span style="color:#e5c07b">any&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="context-树状结构和传播机制">Context 树状结构和传播机制&lt;/h3>
&lt;p>Go 中的 &lt;code>Context&lt;/code> 具有&lt;strong>继承关系&lt;/strong>，可以形成一棵树状结构。当你基于一个父 &lt;code>Context&lt;/code> 创建一个子 &lt;code>Context&lt;/code> 时，它们之间就建立了关联.&lt;/p></description></item><item><title>Recommand Resource</title><link>https://chhz0.github.io/recommand/</link><pubDate>Tue, 13 May 2025 19:32:24 +0800</pubDate><guid>https://chhz0.github.io/recommand/</guid><description>&lt;blockquote>
&lt;p>该页面主要收集一些好用的资源，包括但不限于：学习资料、工具以及开源项目等.&lt;/p>&lt;/blockquote>



&lt;div class="toc-wrapper">
 &lt;div class="toc-header">
 &lt;h2>目录&lt;/h2>
 &lt;/div>
 &lt;div class="toc-content">
 &lt;nav id="TableOfContents">
 &lt;ul>
 &lt;li>&lt;a href="#programming-language-learning">Programming Language Learning&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#website">Website&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#github-repository">Github Repository&lt;/a>&lt;/li>
 &lt;li>&lt;a href="#tool">Tool&lt;/a>&lt;/li>
 &lt;/ul>
&lt;/nav>
 &lt;/div>
&lt;/div>


&lt;style>
.toc-wrapper {
 margin: 1.5rem 0;
 padding: .5rem 1rem;
 background-color: var(--body-background-color);
 border: 1px var(--dim-color) solid;
 border-radius: 5px;
 font-family: var(--font-family-content);
 font-weight: var(--font-weight-content);
}

.toc-header {
 display: flex;
 justify-content: space-between;
 align-items: center;
 margin-bottom: .5rem;
 padding-bottom: 0.5rem;
 border-bottom: 1px var(--dim-color) solid;
}

.toc-header h2 {
 margin: 0;
 padding-left: 0.625rem;
 font-size: 1.25rem;
 font-weight: 600;
 color: var(--body-text-color);
 font-family: var(--font-family-main);
 font-weight: var(--font-weight-main);
}

#TableOfContents {
 padding-left: 0;
}

#TableOfContents ul {
 list-style-type: none;
 padding-left: 1rem;
 margin: 0.25rem 0;
}

#TableOfContents li {
 margin: 0.3rem 0;
}

#TableOfContents ol {
 margin: 0.1rem 0;
}

#TableOfContents a {
 color: var(--body-text-color);
 text-decoration: none;
 transition: color 80ms;
 display: block;
 padding: 0.2rem 0;
 text-underline-offset: 4px;
}

#TableOfContents a:hover {
 color: color-mix(in lab, var(--primary-color) 60%, #fff 40%);
 padding-left: 0.3rem;
}

#TableOfContents a.active {
 color: var(--primary-color);
 font-weight: 500;
 text-decoration: underline;
}
&lt;/style>
&lt;ul>
&lt;li>&lt;a href="https://markdown.com.cn/">Markdown&lt;/a> :Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，Markdown文件的后缀名便是“.md”.&lt;/li>
&lt;li>&lt;a href="https://roadmap.sh/">roadmap.sh&lt;/a> :roadmap.sh is a community effort to create roadmaps, guides and other educational content to help guide developers in picking up a path and guide their learnings.&lt;/li>
&lt;/ul>
&lt;h2 id="programming-language-learning">Programming Language Learning&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://go.dev/doc/effective_go">Effective Go&lt;/a> :Effective Go 是 Go 语言的官方文档，它包含了 Go 语言的基础知识、编码规范、性能优化技巧等.&lt;/li>
&lt;li>&lt;a href="https://draven.co/golang/">Go语言设计与实现&lt;/a> :详细解释Go语言的编译原理、运行时、基础知识和进阶知识.&lt;/li>
&lt;li>&lt;a href="https://tonybai.com/">Go/tonybai&lt;/a> :Go语言博客，由Tony Bai创作.&lt;/li>
&lt;li>&lt;a href="https://www.yuque.com/aceld/npyr8s">Go/aceid - 轻量级并发服务框架zinx&lt;/a> :通过Zinx框架来了解基于Golang编写一个TCP服务器的整体轮廓&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs&lt;/a> :MDN Web Docs 是 Mozilla 开发的一个免费的、开放的、跨平台的 Web 文档项目，它包含了 Web 技术的所有文档，包括 HTML、CSS、JavaScript 等.&lt;/li>
&lt;li>&lt;a href="https://kaisery.github.io/trpl-zh-cn/">Rust/trpl-zh-cn&lt;/a> :The Rust Programming Language 中文翻译.&lt;/li>
&lt;/ul>
&lt;h2 id="website">Website&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gohugo.io/">hugo&lt;/a> :Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.&lt;/li>
&lt;li>&lt;a href="https://uiverse.io/">uiverse&lt;/a> :The Largest Library of Open-Source UI&lt;/li>
&lt;/ul>
&lt;h2 id="github-repository">Github Repository&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/codecrafters-io/build-your-own-x">github/build-your-owm-x&lt;/a> :This repository is a compilation of well-written, step-by-step guides for re-creating our favorite technologies from scratch.&lt;/li>
&lt;/ul>
&lt;h2 id="tool">Tool&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://photokit.com/colors/eyedropper/?lang=zh">eyedropper&lt;/a> :eyedropper是一个颜色选择器，单击颜色吸管按钮并在屏幕上的任意位置选择一种颜色.&lt;/li>
&lt;li>&lt;a href="https://convertio.co/zh/">convertio&lt;/a> :convertio是一个免费的文件转换工具，支持多种文件格式之间的转换，如PDF、图片、视频、音频等。&lt;/li>
&lt;/ul></description></item><item><title>About</title><link>https://chhz0.github.io/about/</link><pubDate>Sat, 05 Apr 2025 14:36:12 +0800</pubDate><guid>https://chhz0.github.io/about/</guid><description>&lt;h1 id="好耶是about">好耶！是&lt;code>About&lt;/code>!&lt;/h1>
&lt;blockquote>
&lt;p>本站由 &lt;a href="https://gohugo.io/">Hugo&lt;/a> 搭建，使用&lt;a href="https://github.com/math-queiroz/rusty-typewriter">math-queiroz/Rusty-Typewriter&lt;/a> 扩展主题.&lt;/p>&lt;/blockquote>
&lt;h2 id="规范">规范&lt;/h2>
&lt;ul>
&lt;li>md文章的tag均使用小写&lt;/li>
&lt;li>md文章的第一段必须为摘要或者简洁，以&lt;code>&amp;gt;&lt;/code>开头&lt;/li>
&lt;/ul></description></item><item><title>Search</title><link>https://chhz0.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chhz0.github.io/search/</guid><description>&lt;h1 id="search">Search&lt;/h1>
&lt;p>Here you can search for indexable pages, like posts and alike. There&amp;rsquo;s also support for URL param &amp;ldquo;q&amp;rdquo; which then auto searches upon page load event.&lt;/p>
&lt;blockquote>
&lt;p>你可以在此处搜索可索引的页面，例如帖子等内容。该功能还支持 URL 参数 &amp;ldquo;q&amp;rdquo;，在页面加载时会自动根据该参数进行搜索。&lt;/p>&lt;/blockquote>
&lt;p class="hidden">&lt;/p>
&lt;p class="search-loading hidden">加载中...&lt;/p>

&lt;form id="search-form" class="search-form" action="#" method="post" accept-charset="UTF-8" role="search">
 &lt;div class="search-bar">
 &lt;label for="query" class="hidden">搜索...&lt;/label>
 &lt;input id="query" class="search-text" type="text" placeholder="搜索. . ."/>
 &lt;/div>
&lt;/form>

&lt;div class="search-results">&lt;/div>

&lt;template>
 &lt;article class="search-result list-view">
 &lt;header>
 &lt;h2 class="title">&lt;a href="#">&lt;/a>&lt;/h2>
 &lt;div class="submitted">
 &lt;time class="created-date">&lt;/time>
 &lt;/div>
 &lt;/header>
 &lt;p class="content">&lt;/p>
 &lt;/article>
&lt;/template></description></item></channel></rss>